ji{
        $this->state->setAreaCode(\Magento\Framework\App\Area::AREA_GLOBAL);
        $output->writeln("Automated Order Report Script Started");
        $this->logger->debug("======= Automated Order Report Script Started ======");

        $receiverEmails = $this->generalHelper->getSystemConfigValue(self::RECEIVER_EMAIL);

        if(!empty($receiverEmails)) 
        {
            $paymentMethods = ['purchaseorder','stripe_payments','cashondelivery', 'payfast'];

            $currentDate = date("Y-m-d 23:59:59");
            $monthStartDate = date('Y-m-01 00:00:00');

            $orders = $this->collectionFactory->create();
            $orders->getSelect()->join(
                ["sop" => "sales_order_payment"],
                'main_table.entity_id = sop.parent_id',
                array('method')
            );
            $orders->addAttributeToFilter('created_at', array('from' => $monthStartDate, 'to' => $currentDate));

            $orders->addFieldToFilter(
                'method',
                ['in' => $paymentMethods]
            );

            $orderIds = $orders->getAllIds();

            if (!is_array($orderIds) || empty($orderIds)) {
                $output->writeln("No Orders Found.");
                $this->logger->debug("No Orders Found.");
            } else {
                $objPHPExcel = new \PhpOffice\PhpSpreadsheet\Spreadsheet;

                $objPHPExcel->getDefaultStyle()->getFont()->setName('Calibri');
                $objPHPExcel->getDefaultStyle()->getFont()->setSize(10);

                $objSheet = $objPHPExcel->getActiveSheet();
                $objSheet->getStyle('A1:P1')->getFont()->setBold(true)->setSize(10);

                $objPHPExcel->setActiveSheetIndex(0)
                    ->setCellValue('A1', 'Order Id')
                    ->setCellValue('B1', 'Invoice No')
                    ->setCellValue('C1', 'Email address')
                    ->setCellValue('D1', 'Created')
                    ->setCellValue('E1', 'Subtotal ex VAT')
                    ->setCellValue('F1', 'Discount')
                    ->setCellValue('G1', 'Total inc VAT')
                    ->setCellValue('H1', 'Status')
                    ->setCellValue('O1', 'Payment Type')
                    ->setCellValue('P1', 'VAT Number');

                $objPHPExcel->setActiveSheetIndex(0)->mergeCells('I1:N1');
                $objSheet->getCell('I1')->setValue('Course booking details');

                $objPHPExcel->getActiveSheet()->getStyle('I1')->getAlignment()
                    ->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);

                $_current = 2;

                foreach ($orderIds as $orderId) {
                    try {
                        $order = $this->orderFactory->create()->load($orderId);
                        $subTotal = $order->getSubTotal();
                        $discount = $order->getDiscountAmount() ? abs($order->getDiscountAmount()) : 0.00;
                        $revenue = $subTotal - $discount;
                        $items = $order->getAllItems();
                        $qty   = $order->getTotalQtyOrdered();

                        $_mergeCells = ($_current + $qty);

                        $payment = $order->getPayment();
                        $method  = $payment->getMethodInstance();
                        $paymentTitle = $method->getTitle();
                        $billingAddress = $order->getBillingAddress();

                        foreach (range('A', 'H') as $columnID) {
                            $objPHPExcel->setActiveSheetIndex(0)->mergeCells("{$columnID}{$_current}:{$columnID}{$_mergeCells}");
                        }

                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("O{$_current}:O{$_mergeCells}");
                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("P{$_current}:P{$_mergeCells}");

                        $objSheet->getCell("I{$_current}")->setValue('Course Name(s)');
                        $objSheet->getCell("J{$_current}")->setValue('Revenue by product (ex VAT)');
                        $objSheet->getCell("K{$_current}")->setValue('Course date(s)');
                        $objSheet->getCell("L{$_current}")->setValue('Attendee(s)');
                        $objSheet->getCell("M{$_current}")->setValue('Attendee(s) email');
                        $objSheet->getCell("N{$_current}")->setValue('Course Type');

                        foreach (range('A', 'P') as $columnID) {
                            $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setAutoSize(true);
                        }

                        $objSheet->getStyle("I{$_current}:N{$_current}")->getFont()->setBold(true)->setSize(10);

                        $objSheet->getCell("A{$_current}")->setValue($order->getId());
                        $objSheet->getCell("B{$_current}")->setValue($order->getIncrementId());
                        $objSheet->getCell("C{$_current}")->setValue($order->getCustomerEmail());
                        $objSheet->getCell("D{$_current}")->setValue(date("m/d/Y g:i A", strtotime($order->getCreatedAt())));
                            $objSheet->getCell("E{$_current}")->setValue($this->priceHelper->currencyByStore(
                                $revenue,
                                $order->getStoreId(),
                                true,
                                false
                            ));
                            $objSheet->getCell("F{$_current}")->setValue($this->priceHelper->currencyByStore(
                                $discount,
                                $order->getStoreId(),
                                true,
                                false
                            ));
                            $objSheet->getCell("G{$_current}")->setValue($this->priceHelper->currencyByStore(
                                $order->getGrandTotal(),
                                $order->getStoreId(),
                                true,
                                false
                            ));
                        $objSheet->getCell("H{$_current}")->setValue(ucwords($order->getStatus()));

                        $rowSet = $this->getCoursesAndParticipant($items, $order,$order->getStoreId());
                        $index  = 1;
                        $subIndex = 1;

                        for ($i = ($_current + 1); $i <= $_mergeCells; $i++) {
                            if (array_key_exists($index, $rowSet)) {
                                if (!empty($rowSet[$index]['attendees'])) {
                                    $participantsCnt = count($rowSet[$index]['attendees']);
                                    $mergeCol        = ($i + ($participantsCnt - 1));
                                    if ($participantsCnt > 1) {
                                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("I{$i}:I{$mergeCol}");
                                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("J{$i}:J{$mergeCol}");
                                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("K{$i}:K{$mergeCol}");
                                        $objPHPExcel->setActiveSheetIndex(0)->mergeCells("N{$i}:N{$mergeCol}");
                                    }
                                    for ($j = $i; $j <= $mergeCol; $j++) {
                                        $objSheet->getCell("L{$j}")->setValue($rowSet[$index]['attendees'][$subIndex]['name']);
                                        $objSheet->getCell("M{$j}")->setValue($rowSet[$index]['attendees'][$subIndex]['email']);
                                        $subIndex++;
                                    }
                                }
                                $objSheet->getCell("I{$i}")->setValue($rowSet[$index]['name']);
                                $objSheet->getCell("J{$i}")->setValue($rowSet[$index]['price']);
                                $objSheet->getCell("K{$i}")->setValue($rowSet[$index]['date']);
                                $objSheet->getCell("N{$i}")->setValue($rowSet[$index]['type']);

                                $index++;
                            }//end if
                        }//end for
                        $objSheet->getCell("O{$_current}")->setValue($paymentTitle);
                        $objSheet->getCell("P{$_current}")->setValue($billingAddress->getVatId());
                        $_current = ($_mergeCells + 1);
                        
                    } catch (\Exception $ex) {
                        $objPHPExcel->getActiveSheet()->removeRow($_current);
                        $output->writeln("========== Automated Monthly Order Report Mail: Exception for Order Id:$orderId ===============");
                        $output->writeln('========== Automated Monthly Order Report Mail: Exception Details:'.$ex->getMessage().' ===============');
                        $this->logger->critical("========== Automated Monthly Order Report Mail: Exception for Order Id:'.$orderId.' ===============");
                        $this->logger->critical('========== Automated Monthly Order Report Mail: Exception Details:'.$ex->getMessage().' ===============');
                    } 
                }//end foreach

                $exportDirectory =  $this->directoryList->getPath("var") . "/exports/";
                $file = 'order_data_' . date("Y_m_d") . '.xlsx';
                if (!is_dir($exportDirectory)) {
                    $ioAdapter = $this->file;
                    $ioAdapter->mkdir($exportDirectory, 0775);
                }
                $objWriter = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($objPHPExcel);
                $objWriter->save($exportDirectory . $file);
                $this->mailSendMethod($exportDirectory, $file, $receiverEmails);
                $output->writeln("Email Sent Successfully to :".$receiverEmails.".");
            }//end if
        } else {
            $output->writeln("Please enter the receiver email address in configuration.");
        }//end if

        $output->writeln("Automated Order Report Script Ended");
        $this->logger->debug("======= Automated Order Report Script Ended ======");        
    }

    /**
     * Get Course and Participant
     *
     * @param array
     */
    public function getCoursesAndParticipant($items, $order, $storeId)
    {
        $list = [];
        $orderId = $order->getId();
        $isFlexibleTrainingOrder = $order->getIsCorporateOrder();
        $index = 1;
        $j     = 1;
        foreach ($items as $item) {
            $product = $this->_funnelHelper->getProductById($item->getProductId());
            if ($product->getId()) {
                $level = '';
                if ($product->getCourseLevel()) {
                    $level = $product->getResource()->getAttribute('course_level')->getFrontend()->getValue($product);
                }
                
                $type = 'classroom';            
                if (!empty($this->_funnelHelper->getAttributeSetNameByID($product->getAttributeSetId())) && strpos($this->_funnelHelper->getAttributeSetNameByID($product->getAttributeSetId()), 'ONLINE') !== false) {
                    $type = 'online';
                }

                $type = $product->getDefaultCourseLength().' '. $type . __(' course');
                
                if ($isFlexibleTrainingOrder) {
                    $type = 'flexible training plan';
                }
                $list[$index]['name']  = $item->getName() . " " .$level;
                $list[$index]['price'] = $this->priceHelper->currencyByStore($item->getRowTotal(), $storeId, true, false);
                $list[$index]['date']  = !$isFlexibleTrainingOrder ? $this->_funnelHelper->getFormatedDate($product->getCourseDate()) : '';
                $list[$index]['type']  = ucwords($type);

                $participants = $this->_funnelHelper->getParticipant($orderId, $item->getProductId());

                foreach ($participants as $_participant) {
                    $list[$index]['attendees'][$j]['name']  = $_participant->getFirstname().$_participant->getLastname();
                    $list[$index]['attendees'][$j]['email'] = $_participant->getEmail();

                    $j++;
                }
                $index++;
            }                           
        }
        return $list;
    }//end getCoursesAndParticipant()





$subIndex = 1;  // Reset subIndex before the loop for attendees

for ($i = ($_current + 1); $i <= $_mergeCells; $i++) {
    if (array_key_exists($index, $rowSet)) {
        if (!empty($rowSet[$index]['attendees'])) {
            $participantsCnt = count($rowSet[$index]['attendees']);
            $mergeCol = ($i + ($participantsCnt - 1));

            if ($participantsCnt > 1) {
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("I{$i}:I{$mergeCol}");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("J{$i}:J{$mergeCol}");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("K{$i}:K{$mergeCol}");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("N{$i}:N{$mergeCol}");
            }

            // Reset subIndex here for each set of attendees
            $subIndex = 1;  // <--- Resetting subIndex to 1 for each course

            for ($j = $i; $j <= $mergeCol; $j++) {
                $objSheet->getCell("L{$j}")->setValue($rowSet[$index]['attendees'][$subIndex]['name']);
                $objSheet->getCell("M{$j}")->setValue($rowSet[$index]['attendees'][$subIndex]['email']);
                $subIndex++;  // Increment after each attendee is processed
            }

            // Move 'i' pointer to avoid overriding the next row
            $i = $mergeCol;
        }

        $objSheet->getCell("I{$i}")->setValue($rowSet[$index]['name']);
        $objSheet->getCell("J{$i}")->setValue($rowSet[$index]['price']);
        $objSheet->getCell("K{$i}")->setValue($rowSet[$index]['date']);
        $objSheet->getCell("N{$i}")->setValue($rowSet[$index]['type']);

        $index++;
    }
}











