public function getCalendarList($isGCPCalendar = false)
{
    $store = $this->_storeManager->getStore();
    $storeId = $store->getId();
    $calendarArr = [];
 
    if ($isGCPCalendar) {
        $rootCategoryId = $store->getRootCategoryId();
        $gcpCatIdArr = $this->_categoryCollectionFactory->create()
            ->addAttributeToFilter('name', 'Google Cloud')
            ->addPathFilter("1/$rootCategoryId/")
            ->addAttributeToFilter('is_active', 1)
            ->setStore($store)
            ->getAllIds();
        if (!empty($gcpCatIdArr)) {
            $collection = $this->getCalendarProductCollection(false, $gcpCatIdArr[0]);
        }
    } else {
        $collection = $this->getCalendarProductCollection();
    }
 
    if ($collection->getSize() > 0) {
        $productIds = $collection->getAllIds();
        $products = $this->_productRepository->getByIds($productIds);
 
        $categoryCache = [];
        foreach ($products as $product) {
            $courseDate = $product->getCourseDate();
            $courseDateTimestamp = strtotime($courseDate);
            $arrKey = date('F Y', $courseDateTimestamp);
 
            $categories = $product->getCategoryIds();
            $categoryName = $this->getFirstActiveCategoryName($categories, $storeId, $categoryCache);
 
            $courseLocation = $this->getCourseLocationText($collection, $product);
            $courseFormat = ((int) $product->getCourseLocation() == 22) ? 'Virtual' : 'Classroom';
            $courseDuration = strtoupper($this->_courseHelper->getCalendarPageCourseDuration($product));
            $priceArr = $this->_generalHelper->getFormatedPrice($product->getPrice(), 0, false, true);
 
            $calendarArr[$arrKey][] = [
                'raw_course_date' => $courseDate,
                'raw_price' => $product->getPrice(),
                'course_date' => date('M d', $courseDateTimestamp),
                'course_day' => date('l', $courseDateTimestamp),
                'course_day_short' => date('D', $courseDateTimestamp),
                'category_name' => $categoryName,
                'course_name' => $product->getName(),
                'course_location' => strtoupper($courseLocation),
                'course_duration' => $courseDuration,
                'price' => $priceArr,
                'product_id' => $product->getId(),
                'url' => $this->_generalHelper->getProductUrlRewrite($product),
                'course_format' => $courseFormat
            ];
        }
    }
 
    $this->registry->register('course_list', $calendarArr, true);
    return $calendarArr;
}
 
private function getFirstActiveCategoryName(array $categoryIds, int $storeId, array &$cache): string
{
    foreach ($categoryIds as $catId) {
        if (isset($cache[$catId])) {
            return $cache[$catId];
        }
        $category = $this->_categoryRepository->get($catId, $storeId);
        if ($category->getIsActive()) {
            $cache[$catId] = $category->getName();
            return $cache[$catId];
        }
    }
    return '';
}
 
private function getCourseLocationText($collection, $product): string
{
    $locationAttr = $collection->getResource()->getAttribute('course_location');
    if ($locationAttr->usesSource()) {
        return $locationAttr->getSource()->getOptionText($product->getCourseLocation());
    }
    return '';
}
 
public function getCalendarProductCollection($forFilters = false, $parentCategoryId = null)
{
    $expDate = $this->_generalHelper->getCourseExpiryDate();
    $attributeSets = [
        $this->_courseHelper->getAttributeSetId("Classroom Course"),
        $this->_courseHelper->getAttributeSetId("R&Y Online Course"),
        $this->_courseHelper->getAttributeSetId("Jellyfish Online Course")
    ];
 
    $collection = $this->_productCollection->create();
    $collection->getSelect()
        ->reset(\Zend_Db_Select::COLUMNS)
        ->columns('entity_id')
        ->order(['course_date ASC', 'name ASC']);
 
    $collection->addAttributeToFilter('status', ['in' => $this->_productStatus->getVisibleStatusIds()])
               ->setVisibility($this->_productVisibility->getVisibleInSiteIds())
               ->addStoreFilter($this->_storeManager->getStore())
               ->addAttributeToFilter("attribute_set_id", ['in' => $attributeSets])
               ->addAttributeToFilter("name", ['neq' => 'NULL'])
               ->addAttributeToFilter("course_date", ['gt' => $expDate]);
 
    if (!$forFilters) {
        $filters = $this->_request->getParams();
        if (!empty($filters['month'])) {
            $collection->getSelect()->where('EXTRACT(YEAR_MONTH FROM course_date) IN (?)', explode(',', $filters['month']));
        }
        if (!empty($filters['category']) || $parentCategoryId !== null) {
            $categoryIds = !empty($filters['category']) ? explode(',', $filters['category']) : [$parentCategoryId];
            $catFilterArr = [];
            foreach ($categoryIds as $catId) {
                $this->processCategory($catId, $catFilterArr);
            }
            $collection->addCategoriesFilter(['in' => $catFilterArr]);
        }
        if (!empty($filters['format'])) {
            $formatFilter = $filters['format'];
            $filterValues = explode(',', $formatFilter);
 
            if (count($filterValues) < 2) {
                if ($filterValues[0] == 'virtual') {
                    $collection->addAttributeToFilter("course_location", ['eq' => 22]);
                } else {
                    $collection->addAttributeToFilter("course_location", ['neq' => 22]);
                }
            }
        }
        if (!empty($filters['location'])) {
            $collection->addAttributeToFilter("course_location", ['in' => explode(',', $filters['location'])]);
        }
    }
 
    return $collection;
}
