public function getCalendarList($isGCPCalendar = false)
{
    $storeId = $this->_storeManager->getStore()->getId();
    $sessionKey = 'calendar_data_' . $storeId . ($isGCPCalendar ? '_gcp' : '');
 
    // Retrieve initial data or load from session
    if ($this->customerSession->getData($sessionKey)) {
        $productIds = $this->customerSession->getData($sessionKey);
    } else {
        // Fetch initial data and store in session
        $productIds = $this->fetchProductIds($isGCPCalendar);
        $this->customerSession->setData($sessionKey, $productIds);
    }
 
    // Apply filters if it's an AJAX request
    $filters = $this->_request->isAjax() ? $this->_request->getParams() : [];
    $filteredProductData = $this->applyFiltersToData($productIds, $filters);
 
    // Register data for rendering
    $this->registry->register('course_list', $filteredProductData, true);
 
    // Return filtered data
    return $filteredProductData;
}
 
private function fetchProductIds($isGCPCalendar)
{
    if ($isGCPCalendar) {
        $store = $this->_storeManager->getStore();
        $rootCategoryId = $store->getRootCategoryId();
        $gcpCatIdArr = $this->_categoryCollectionFactory->create()
            ->addAttributeToFilter('name', 'Google Cloud')
            ->addPathFilter("1/$rootCategoryId/")
            ->addAttributeToFilter('is_active', 1)
            ->setStore($store)
            ->getAllIds();
        $collection = $this->getCalendarProductCollection(false, $gcpCatIdArr[0]);
    } else {
        $collection = $this->getCalendarProductCollection();
    }
 
    $productIds = [];
    foreach ($collection as $product) {
        $productIds[] = $product->getId();
    }
    return $productIds;
}
 
private function applyFiltersToData($productIds, $filters)
{
    $filteredData = [];
    foreach ($productIds as $productId) {
        $product = $this->_productRepository->getById($productId);
        if ($this->applyFilterConditions($product, $filters)) {
            $filteredData[] = $this->prepareProductData($product);
        }
    }
    return $filteredData;
}
 
private function applyFilterConditions($product, $filters)
{
    // Apply your filtering conditions here
    if (isset($filters['month']) && !empty($filters['month'])) {
        $productMonth = date('Ym', strtotime($product->getCourseDate()));
        if (!in_array($productMonth, explode(',', $filters['month']))) {
            return false;
        }
    }
 
    if (isset($filters['category']) && !empty($filters['category'])) {
        $productCategories = $product->getCategoryIds();
        if (!array_intersect($productCategories, explode(',', $filters['category']))) {
            return false;
        }
    }
 
    if (isset($filters['format']) && !empty($filters['format'])) {
        $isVirtual = $product->getCourseLocation() == 22;
        if (($filters['format'] == 'virtual' && !$isVirtual) || ($filters['format'] == 'classroom' && $isVirtual)) {
            return false;
        }
    }
 
    if (isset($filters['location']) && !empty($filters['location'])) {
        if (!in_array($product->getCourseLocation(), explode(',', $filters['location']))) {
            return false;
        }
    }
 
    return true;
}
 
private function prepareProductData($product)
{
    $courseDate = $product->getCourseDate();
    $courseDateTimestamp = strtotime($courseDate);
 
    $categoryName = $this->getCategoryName($product, $this->_storeManager->getStore()->getId());
 
    $locationAttr = $product->getResource()->getAttribute('course_location');
    $courseLocation = $locationAttr->usesSource() ? $locationAttr->getSource()->getOptionText($product->getCourseLocation()) : '';
    $courseFormat = $product->getCourseLocation() == 22 ? 'Virtual' : 'Classroom';
 
    $courseDuration = strtoupper($this->_courseHelper->getCalendarPageCourseDuration($product));
    $priceArr = $this->_generalHelper->getFormatedPrice($product->getPrice(), 0, false, true);
 
    return [
        'raw_course_date' => $courseDate,
        'raw_price' => $product->getPrice(),
        'course_date' => date('M d', $courseDateTimestamp),
        'course_day' => date('l', $courseDateTimestamp),
        'course_day_short' => date('D', $courseDateTimestamp),
        'category_name' => $categoryName,
        'course_name' => $product->getName(),
        'course_location' => strtoupper($courseLocation),
        'course_duration' => $courseDuration,
        'price' => $priceArr,
        'product_id' => $product->getId(),
        'url' => $this->_generalHelper->getProductUrlRewrite($product),
        'course_format' => $courseFormat
    ];
}
 
private function getCategoryName($product, $storeId)
{
    $categories = $product->getCategoryIds();
    if ($categories) {
        foreach ($categories as $catId) {
            $category = $this->_categoryRepository->get($catId, $storeId);
            if ($category->getIsActive()) {
                return $category->getName();
            }
        }
    }
    return '';
}
