public function getCalendarList($isGCPCalendar = false)
{
    $storeId = $this->_storeManager->getStore()->getId();
    $collection = $this->getCalendarProductCollection($isGCPCalendar);
 
    $calendarArr = [];
    if ($collection->getSize() > 0) {
        foreach ($collection as $product) {
            $calendarArr = $this->processProductForCalendar($product, $storeId, $calendarArr);
        }
    }
    $this->registry->register('course_list', $calendarArr, true);
    return $calendarArr;
}
 
private function processProductForCalendar($product, $storeId, $calendarArr)
{
    $courseDateTimestamp = strtotime($product->getCourseDate());
    $categories = $product->getCategoryIds();
    $categoryName = $this->getFirstActiveCategoryName($categories, $storeId);
    
    $courseLocation = $this->getCourseLocationText($product);
    $courseFormat = $this->determineCourseFormat($product->getCourseLocation());
 
    $courseDuration = strtoupper($this->_courseHelper->getCalendarPageCourseDuration($product));
    $priceArr = $this->_generalHelper->getFormatedPrice($product->getPrice(), 0, false, true);
    $arrKey = date('F Y', $courseDateTimestamp);
 
    $productData = [
        'raw_course_date' => $product->getCourseDate(),
        'raw_price' => $product->getPrice(),
        'course_date' => date('M d', $courseDateTimestamp),
        'course_day' => date('l', $courseDateTimestamp),
        'course_day_short' => date('D', $courseDateTimestamp),
        'category_name' => $categoryName,
        'course_name' => $product->getName(),
        'course_location' => strtoupper($courseLocation),
        'course_duration' => $courseDuration,
        'price' => $priceArr,
        'product_id' => $product->getId(),
        'url' => $this->_generalHelper->getProductUrlRewrite($product),
        'course_format' => $courseFormat,
    ];
 
    $calendarArr[$arrKey][] = $productData;
    return $calendarArr;
}
 
private function getFirstActiveCategoryName($categoryIds, $storeId)
{
    foreach ($categoryIds as $catId) {
        $category = $this->_categoryRepository->get($catId, $storeId);
        if ($category->getIsActive()) {
            return $category->getName();
        }
    }
    return '';
}
 
private function getCourseLocationText($product)
{
    $locationAttr = $this->_productResource->getAttribute('course_location');
    if ($locationAttr->usesSource()) {
        return $locationAttr->getSource()->getOptionText($product->getCourseLocation());
    }
    return '';
}
 
private function determineCourseFormat($courseLocation)
{
    return ((int) $courseLocation == 22) ? 'Virtual' : 'Classroom';
}
 
public function getCalendarProductCollection($isGCPCalendar = false)
{
    $expDate = $this->_generalHelper->getCourseExpiryDate();
    $attributeSets = $this->_courseHelper->getRelevantAttributeSets();
    $store = $this->_storeManager->getStore();
 
    $collection = $this->_productCollection->create()
        ->addAttributeToSelect('entity_id')
        ->addAttributeToFilter('status', ['in' => $this->_productStatus->getVisibleStatusIds()])
        ->setVisibility($this->_productVisibility->getVisibleInSiteIds())
        ->addStoreFilter($store)
        ->addAttributeToFilter('attribute_set_id', ['in' => $attributeSets])
        ->addAttributeToFilter('name', ['neq' => 'NULL'])
        ->addAttributeToFilter('course_date', ['gt' => $expDate])
        ->addOrder('course_date', 'ASC')
        ->addOrder('name', 'ASC');
 
    if ($isGCPCalendar) {
        $collection = $this->applyGCPCalendarFilter($collection);
    } else {
        $collection = $this->applyFiltersFromRequest($collection);
    }
 
    return $collection;
}
 
private function applyGCPCalendarFilter($collection)
{
    $store = $this->_storeManager->getStore();
    $rootCategoryId = $store->getRootCategoryId();
    $gcpCatIdArr = $this->_categoryCollectionFactory->create()
        ->addAttributeToFilter('name', 'Google Cloud')
        ->addPathFilter("1/{$rootCategoryId}/")
        ->addAttributeToFilter('is_active', 1)
        ->setStore($store)
        ->getAllIds();
 
    if (count($gcpCatIdArr) > 0) {
        $collection->addCategoriesFilter(['in' => $gcpCatIdArr[0]]);
    }
 
    return $collection;
}
 
private function applyFiltersFromRequest($collection)
{
    $filters = $this->_request->getParams();
 
    if (!empty($filters['month'])) {
        $collection->getSelect()->where('EXTRACT(YEAR_MONTH FROM course_date) IN (?)', $filters['month']);
    }
 
    if (!empty($filters['category'])) {
        $catFilterArr = $this->getCategoryFilterArray($filters['category']);
        $collection->addCategoriesFilter(['in' => $catFilterArr]);
    }
 
    if (!empty($filters['format'])) {
        $this->applyFormatFilter($collection, $filters['format']);
    }
 
    if (!empty($filters['location'])) {
        $collection->addAttributeToFilter('course_location', ['in' => explode(',', $filters['location'])]);
    }
 
    return $collection;
}
 
private function getCategoryFilterArray($categories)
{
    $catArr = explode(',', $categories);
    $catFilterArr = [];
    foreach ($catArr as $catId) {
        $this->processCategory($catId, $catFilterArr);
    }
    return $catFilterArr;
}
 
private function applyFormatFilter($collection, $formatFilter)
{
    $filterValues = explode(',', $formatFilter);
    if (count($filterValues) === 1) {
        if ($filterValues[0] === 'virtual') {
            $collection->addAttributeToFilter('course_location', ['eq' => 22]);
        } else {
            $collection->addAttributeToFilter('course_location', ['neq' => 22]);
        }
    }
}
